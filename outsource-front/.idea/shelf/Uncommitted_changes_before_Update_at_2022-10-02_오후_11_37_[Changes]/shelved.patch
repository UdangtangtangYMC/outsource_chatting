Index: app/src/main/java/com/lodong/android/neighborcommunication/utils/stomp/StompUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lodong.android.neighborcommunication.utils.stomp;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.util.Log;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.lodong.android.neighborcommunication.repository.Repository;\r\nimport com.lodong.android.neighborcommunication.repository.RepositoryImpl;\r\nimport com.lodong.android.neighborcommunication.repository.model.ChatDisplayDTO;\r\nimport com.lodong.android.neighborcommunication.repository.model.ChatMessageDTO;\r\nimport com.lodong.android.neighborcommunication.repository.model.ChatRoomDTO;\r\nimport com.lodong.android.neighborcommunication.utils.preferences.Code;\r\nimport com.lodong.android.neighborcommunication.utils.preferences.PreferenceManager;\r\nimport com.lodong.android.neighborcommunication.view.callback.GetChatRoomIdCallBack;\r\nimport com.lodong.android.neighborcommunication.view.callback.RoomCreateCallBack;\r\n\r\nimport io.reactivex.Scheduler;\r\nimport io.reactivex.schedulers.Schedulers;\r\nimport ua.naiksoftware.stomp.Stomp;\r\nimport ua.naiksoftware.stomp.StompClient;\r\n\r\npublic class StompUtils {\r\n    private static final String TAG = StompUtils.class.getSimpleName();\r\n    private static final String BASE_URL = \"ws://210.99.223.38:13884/ws\";\r\n    public static final StompUtils INSTANCE = new StompUtils();\r\n    private static final Gson gson = new Gson();\r\n    private static final Repository repository = RepositoryImpl.getInstance();\r\n    private static final StompClient stompClient = Stomp.over(Stomp.ConnectionProvider.OKHTTP, BASE_URL);\r\n\r\n    @SuppressLint(\"CheckResult\")\r\n    public static void init(Context context) {\r\n        String subscribeURL = \"/queue/\" + getId(context);\r\n        Log.d(TAG, subscribeURL);\r\n        stompClient.connect();\r\n        stompClient\r\n                .topic(subscribeURL)\r\n                .subscribe(data -> {\r\n                    String payload = data.getPayload();\r\n                    ChatMessageDTO message = gson.fromJson(payload, ChatMessageDTO.class);\r\n                    Log.d(TAG, \"init message : \" + message.toString());\r\n                    if (!repository.isChatRoomExists(message.getSender(), message.getReceiver()))\r\n                        Log.d(TAG, \"create chatting room\");\r\n                    repository.insertChatRoom(new ChatRoomDTO(message.getRoomId(), message.getSender(), message.getReceiver(), message.getSenderNickName(), message.getReceiverNickName()));\r\n                    if (message.getSender().equals(getId(context)))\r\n                        message.setViewType(Code.ViewType.RIGHT_CONTENT);\r\n                    else message.setViewType(Code.ViewType.LEFT_CONTENT);\r\n                    Log.d(TAG, \"insert chatmessage\");\r\n                    repository.insertChatMessage(message);\r\n                    Log.d(TAG, \"insert chatDisplay\");\r\n                    repository.insertChatDisplay(new ChatDisplayDTO(message.getRoomId(), message.getChatId()));\r\n                }, throwable -> {\r\n                    Log.d(TAG, \"데이터 수신 오류 : \"+throwable.getMessage());\r\n                });\r\n\r\n    }\r\n\r\n    private static String getId(Context context) {\r\n        return PreferenceManager.getId(context);\r\n    }\r\n\r\n    public static void disconnect() {\r\n        stompClient.disconnect();\r\n    }\r\n\r\n    public void send(ChatMessageDTO message, GetChatRoomIdCallBack getChatRoomIdCallBack) {\r\n        if (!repository.isChatRoomExists(message.getSender(), message.getReceiver())) {\r\n            repository.setRoomCreatedCallBack(getRoomCreateCallBack(getChatRoomIdCallBack));\r\n            repository.createChatRoom(message.getSender(), message.getReceiver(), message);\r\n        } else {\r\n            String toJson = gson.toJson(message);\r\n            stompClient.send(\"/pub/msg\", toJson)\r\n                    .subscribeOn(Schedulers.io())\r\n                    .subscribe();\r\n        }\r\n    }\r\n\r\n    public RoomCreateCallBack getRoomCreateCallBack(GetChatRoomIdCallBack getChatRoomIdCallBack) {\r\n        return new RoomCreateCallBack() {\r\n            @Override\r\n            public void onSuccess(ChatRoomDTO chatRoom, ChatMessageDTO message) {\r\n                Log.d(TAG, \"chatRoom : \" + chatRoom.toString());\r\n                Log.d(TAG, \"chatMessage : \" + message.toString());\r\n                message.setRoomId(chatRoom.getRoomId());\r\n                getChatRoomIdCallBack.onSuccess(chatRoom.getRoomId());\r\n                repository.insertChatRoom(chatRoom);\r\n                String toJson = new Gson().toJson(message);\r\n                stompClient.send(\"/pub/msg\", toJson).subscribe();\r\n            }\r\n\r\n            @Override\r\n            public void onFailed(ChatRoomDTO chatRoom, ChatMessageDTO message) {\r\n                Log.d(TAG, \"chatRoom : \" + chatRoom.toString());\r\n                Log.d(TAG, \"chatMessage : \" + message.toString());\r\n                message.setRoomId(chatRoom.getRoomId());\r\n                getChatRoomIdCallBack.onSuccess(chatRoom.getRoomId());\r\n                repository.insertChatRoom(chatRoom);\r\n                String toJson = new Gson().toJson(message);\r\n                stompClient.send(\"/pub/msg\", toJson).subscribe();\r\n            }\r\n        };\r\n    }\r\n\r\n    public boolean isConnect(){\r\n        return stompClient.isConnected();\r\n    }\r\n\r\n    public static void reconnect() {\r\n        stompClient.reconnect();\r\n    }\r\n\r\n    public static StompClient getStompClient() {\r\n        return stompClient;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lodong/android/neighborcommunication/utils/stomp/StompUtils.java b/app/src/main/java/com/lodong/android/neighborcommunication/utils/stomp/StompUtils.java
--- a/app/src/main/java/com/lodong/android/neighborcommunication/utils/stomp/StompUtils.java	(revision 6bb6787d6eca8e1ce350c8410f552697d54c9f86)
+++ b/app/src/main/java/com/lodong/android/neighborcommunication/utils/stomp/StompUtils.java	(date 1664718942870)
@@ -68,6 +68,7 @@
             repository.setRoomCreatedCallBack(getRoomCreateCallBack(getChatRoomIdCallBack));
             repository.createChatRoom(message.getSender(), message.getReceiver(), message);
         } else {
+            repository.insertChatMessage(message);
             String toJson = gson.toJson(message);
             stompClient.send("/pub/msg", toJson)
                     .subscribeOn(Schedulers.io())
Index: app/src/main/java/com/lodong/android/neighborcommunication/repository/chatmessageservice/ChatMessageDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.lodong.android.neighborcommunication.repository.chatmessageservice;\r\n\r\nimport static androidx.room.OnConflictStrategy.IGNORE;\r\nimport static androidx.room.OnConflictStrategy.REPLACE;\r\n\r\nimport androidx.lifecycle.LiveData;\r\nimport androidx.room.Dao;\r\nimport androidx.room.Delete;\r\nimport androidx.room.Insert;\r\nimport androidx.room.Query;\r\n\r\nimport com.lodong.android.neighborcommunication.repository.model.ChatMessageDTO;\r\n\r\nimport java.util.List;\r\n\r\n@Dao\r\npublic interface ChatMessageDao {\r\n    @Insert(onConflict = IGNORE)\r\n    void insert(ChatMessageDTO chatMessageDTO);\r\n\r\n    @Delete\r\n    void delete(ChatMessageDTO chatMessageDTO);\r\n\r\n    @Query(\"SELECT * FROM chatMessage WHERE chatId = :chatId\")\r\n    ChatMessageDTO getChatMessageById(long chatId);\r\n\r\n    @Query(\"SELECT * FROM chatMessage WHERE chatRoomId = :chatRoomId\")\r\n    LiveData<List<ChatMessageDTO>> getChatMessage(long chatRoomId);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/lodong/android/neighborcommunication/repository/chatmessageservice/ChatMessageDao.java b/app/src/main/java/com/lodong/android/neighborcommunication/repository/chatmessageservice/ChatMessageDao.java
--- a/app/src/main/java/com/lodong/android/neighborcommunication/repository/chatmessageservice/ChatMessageDao.java	(revision 6bb6787d6eca8e1ce350c8410f552697d54c9f86)
+++ b/app/src/main/java/com/lodong/android/neighborcommunication/repository/chatmessageservice/ChatMessageDao.java	(date 1664718957461)
@@ -7,6 +7,7 @@
 import androidx.room.Dao;
 import androidx.room.Delete;
 import androidx.room.Insert;
+import androidx.room.PrimaryKey;
 import androidx.room.Query;
 
 import com.lodong.android.neighborcommunication.repository.model.ChatMessageDTO;
@@ -16,6 +17,7 @@
 @Dao
 public interface ChatMessageDao {
     @Insert(onConflict = IGNORE)
+    @PrimaryKey(autoGenerate = true)
     void insert(ChatMessageDTO chatMessageDTO);
 
     @Delete
